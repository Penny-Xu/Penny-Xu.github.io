{"data":{"markdownRemark":{"frontmatter":{"title":"Distributed Deep Learning","date":"2019-10-20","tags":["neural network","deep learning","parallelism"]},"html":"<p><a href=\"https://leimao.github.io/blog/Data-Parallelism-vs-Model-Paralelism/\">https://leimao.github.io/blog/Data-Parallelism-vs-Model-Paralelism/</a>\n<a href=\"https://arxiv.org/pdf/1811.03600.pdf\">https://arxiv.org/pdf/1811.03600.pdf</a></p>\n<p>We all know that GPUs can speed up training time of neural network models over CPUs due to its parallel nature as kinda demonstrated from my previous post. Recently, a friend who read my post asked me...if training on GPUs is so effective, why don't you just have multiple GPUs and stack them up to decrease training time..because..parallelism. Intuitively, this makes a lot of sense, more hardware resources means more computing power, which means less training time. But now the question is HOW? What is the best way to split up the work load of training a neural network model onto multiple GPUs? Will there be a problem of diminishing returns? These are the questions that I could not answer...until now!</p>\n<h2>Initial Thoughts</h2>\n<p>Training neural networks is, surprisingly, a simple problem. Stochastic gradient descent (SDG) with minibatches and its variants remain, at least for now, the most popular methods for training deep neural networks. When you ignore the fancy optimizers, SDG essentially becomes a for loop to calculate the gradients and update the weights. The bare bones of SDG for training a neural network literally looks something like this:</p>\n<pre><code>  for number of epochs:\n      for samples in dataset:\n          model.forward\n          loss.backward\n          new weights &#x3C;- old weights - learning_rate * gradient\n</code></pre>\n<p>You have the training dataset that consists of some number of samples. Each sample contributes to the gradient in a small way. We can update the weights after a single sample, or we can compute the average gradients contributed from each sample in a group of samples (minibatch), and then update the weights for each minibatch by simply taking a step in the negative direction. Usually, updating after each minibatch is more stable than updating after each sample because taking the average of the gradient reduces the variance of the gradient estimate. Now, you are probably wondering why can't the minibatch size can be the whole training input, so you can update the weights once for the whole dataset (batch gradient descent). The answer is usually we are limited by memory, aka, the entire dataset will probably not fit in memory if we want to do one pass for the entire dataset. All this talk about SDG and its variants may be confusing, let me clear things up a bit through the summary below:</p>\n<h4>Quick Summary of SDG</h4>\n<h5>Stochastic Gradient Descent - updates weights after EACH sample</h5>\n<ul>\n<li>more frequent updates may result in faster convergence</li>\n<li>more frequent updates is also computationally expensive</li>\n<li>each update is noisy..may be good for getting out of local minima</li>\n<li>noisy = larger variance = non optimal convergence</li>\n</ul>\n<h5>Batch Gradient Descent - updates weights after ALL samples in dataset</h5>\n<ul>\n<li>fewer updates = better computational efficiency</li>\n<li>more stable convergence since each update is a better approximation of true gradient</li>\n<li>Stable can also mean premature convergence :( rip</li>\n<li>no memory to fit whole dataset</li>\n</ul>\n<h5>Minibatch Stochastic Gradient Descent - updates weights after a MINIBATCH of samples</h5>\n<ul>\n<li>best of both worlds of the 2 variants above</li>\n<li>but need to have a hyper parameter of minibatch size</li>\n</ul>\n<p>In the end, the above pseudo code is what we are trying to parallelize here. To be honest, we don't have much to work with. This could be good and bad, haha.   </p>\n<h2>Data Parallelism</h2>\n<p>From the training pseudo code above, it is easy to see that a straight forward approach to parallelize the for loop by processing different groups of minibatch samples on different GPUs. This is similar to the idea of using minibatch gradient descent, but scaled to multiple GPUs.</p>\n<h2>Model Parallelism</h2>\n<p>Self explanatory.</p>\n<h2>Pipelining</h2>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"data-parallelism"}}